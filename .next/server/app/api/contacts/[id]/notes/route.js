"use strict";(()=>{var e={};e.id=2197,e.ids=[2197],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},56950:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>x,patchFetch:()=>f,requestAsyncStorage:()=>l,routeModule:()=>d,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m});var o={};r.r(o),r.d(o,{GET:()=>u,POST:()=>p});var n=r(49303),a=r(88716),s=r(60670),i=r(87070),c=r(20728);async function u(e,{params:t}){let r=t.id;try{let e=await c.Z.note.findMany({where:{contactId:r},orderBy:{createdAt:"desc"}});return i.NextResponse.json(e)}catch(e){return console.error(`Failed to fetch notes for contact ${r}:`,e),i.NextResponse.json({error:"Failed to fetch notes"},{status:500})}}async function p(e,{params:t}){let r=t.id;try{let{content:t}=await e.json();if(!t)return i.NextResponse.json({error:"Note content cannot be empty"},{status:400});let o=await c.Z.note.create({data:{content:t,contactId:r}});return i.NextResponse.json(o,{status:201})}catch(e){return console.error(`Failed to create note for contact ${r}:`,e),i.NextResponse.json({error:"Failed to create note"},{status:500})}}let d=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/contacts/[id]/notes/route",pathname:"/api/contacts/[id]/notes",filename:"route",bundlePath:"app/api/contacts/[id]/notes/route"},resolvedPagePath:"C:\\vyaparconnect-crm\\src\\app\\api\\contacts\\[id]\\notes\\route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:l,staticGenerationAsyncStorage:m,serverHooks:h}=d,x="/api/contacts/[id]/notes/route";function f(){return(0,s.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}},20728:(e,t,r)=>{r.d(t,{Z:()=>n});let o=require("@prisma/client"),n=globalThis.prisma||new o.PrismaClient}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[8948,5972],()=>r(56950));module.exports=o})();